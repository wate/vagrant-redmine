---
# code: language=ansible
- name: Assert packages
  ansible.builtin.assert:
    that:
      - ansible_facts.packages['etckeeper']
      - ansible_facts.packages['postfix']
      - ansible_facts.packages['vnstat']
- name: Assert etckeeper service
  ansible.builtin.assert:
    that:
      - ansible_facts.services['etckeeper.service']
- name: Assert Postfix service
  ansible.builtin.assert:
    that:
      - ansible_facts.services['postfix.service']
      - ansible_facts.services['postfix.service']['status'] == 'enabled'
      - ansible_facts.services['postfix@-.service']['state'] == 'running'
- name: Test Postfix config
  block:
    - name: Gather Postfix myhostname setting
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          postconf | grep "^myhostname ="
      failed_when: myhostname_result.rc > 1
      changed_when: false
      register: myhostname_result
    - name: Assert Postfix myhostname setting
      ansible.builtin.assert:
        that:
          - expect_hostname == (myhostname_result.stdout | split(' = '))[1]
- name: Assert vnstat service
  ansible.builtin.assert:
    that:
      - ansible_facts.services['vnstat.service']
      - ansible_facts.services['vnstat.service']['state'] == 'running'
      - ansible_facts.services['vnstat.service']['status'] == 'enabled'
    quiet: true
- name: Test security
  block:
    - name: Assert packages
      ansible.builtin.assert:
        that:
          - ansible_facts.packages['ufw']
          - ansible_facts.packages['fail2ban']
        quiet: true
    - name: Test SSH GeoIP filter
      block:
        - name: Assert GeoIP filter dependency packages
          ansible.builtin.assert:
            that:
              - ansible_facts.packages['geoip-bin']
              - ansible_facts.packages['geoip-database']
            quiet: true
        - name: Check GeoIP database update script
          ansible.builtin.stat:
            path: /etc/cron.weekly/geoip_update
          register: geoip_update_script_result
        - name: Assert GeoIP database update script
          ansible.builtin.assert:
            that:
              - geoip_update_script_result.stat.exists
              - geoip_update_script_result.stat.mode == '0755'
            quiet: true
        - name: Check GeoIP ssh filter script
          ansible.builtin.stat:
            path: /usr/local/bin/sshfilter
          register: sshfilter_script_result
        - name: Assert GeoIP ssh filter script
          ansible.builtin.assert:
            that:
              - sshfilter_script_result.stat.exists
              - sshfilter_script_result.stat.mode == '0755'
            quiet: true
        - name: Check SSH GeoIP filter setting
          ansible.builtin.command:
            cmd: 'grep "sshd: ALL: spawn /usr/local/bin/sshfilter %a" /etc/hosts.allow'
          failed_when: ssh_geoip_filter_result.rc > 1
          changed_when: false
          register: ssh_geoip_filter_result
        - name: Assert SSH GeoIP filter setting
          ansible.builtin.assert:
            that:
              - ssh_geoip_filter_result.rc == 0
            quiet: true
    - name: Test fail2ban
      block:
        - name: Check fail2ban sshd enable
          ansible.builtin.command:
            cmd: fail2ban-client status sshd
          changed_when: false
          register: fail2ban_ssh_enable_result
        - name: Assert cfail2ban sshd enable
          ansible.builtin.assert:
            that:
              - fail2ban_ssh_enable_result.rc == 0
            quiet: true
        - name: Assert fail2ban service
          ansible.builtin.assert:
            that:
              - ansible_facts.services['fail2ban.service']
              - ansible_facts.services['fail2ban.service']['state'] == 'running'
              - ansible_facts.services['fail2ban.service']['status'] == 'enabled'
            quiet: true
    - name: Test ufw
      block:
        - name: Check ufw status
          ansible.builtin.shell:
            cmd: |
              set -o pipefail
              ufw status | grep "Status: active"
            executable: /usr/bin/bash
          failed_when: ufw_status_result.rc > 1
          changed_when: false
          register: ufw_status_result
        - name: Assert ufw status
          ansible.builtin.assert:
            that:
              - ufw_status_result.rc == 0
            quiet: true
- name: Test package auto upgrade
  block:
    - name: Assert cron-apt package
      ansible.builtin.assert:
        that:
          - ansible_facts.packages['cron-apt']
        quiet: true
    - name: Assert apt-daily service
      ansible.builtin.assert:
        that:
          - ansible_facts.services['apt-daily.service']
          - ansible_facts.services['apt-daily-upgrade.service']
        quiet: true
    - name: Check cron-apt auto upgrade
      ansible.builtin.command:
        cmd: grep "dist-upgrade -y -o APT::Get::Show-Upgraded=true" /etc/cron-apt/action.d/3-download
      failed_when: auto_upgrade_result.rc > 1
      changed_when: false
      register: auto_upgrade_result
    - name: Assert cron-apt auto upgrade
      ansible.builtin.assert:
        that:
          - auto_upgrade_result.rc == 0
        quiet: true
