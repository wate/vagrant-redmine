---
# code: language=ansible
- name: Verify
  hosts: all
  become: true
  module_defaults:
    ansible.builtin.shell:
      executable: /bin/bash
  gather_facts: true
  tags: verify
  tasks:
    - name: Gather package facts
      ansible.builtin.package_facts:
        manager: auto
    - name: Gather service facts
      ansible.builtin.service_facts:
    - name: Gather facts on listening ports
      community.general.listen_ports_facts:
        command: ss
    - name: Set assert variables
      ansible.builtin.set_fact:
        listen_tcp_posts: "{{ ansible_facts.tcp_listen | map(attribute='port') | unique | list }}"
        listen_udp_posts: "{{ ansible_facts.udp_listen | map(attribute='port') | unique | list }}"
    - name: Test base
      block:
        - name: Assert packages
          ansible.builtin.assert:
            that:
              - ansible_facts.packages['etckeeper']
              - ansible_facts.packages['postfix']
              - ansible_facts.packages['vnstat']
        - name: Test Postfix config
          block:
            - name: Gather Postfix myhostname setting
              ansible.builtin.shell:
                cmd: |
                  set -o pipefail
                  postconf | grep "^myhostname ="
              failed_when: myhostname_result.rc > 1
              changed_when: false
              register: myhostname_result
            - name: Assert Postfix myhostname setting
              ansible.builtin.assert:
                that:
                  - redmine_hostname == (myhostname_result.stdout | split(' = '))[1]
        - name: Assert etckeeper service
          ansible.builtin.assert:
            that:
              - ansible_facts.services['etckeeper.service']
        - name: Assert Postfix service
          ansible.builtin.assert:
            that:
              - ansible_facts.services['postfix.service']
              - ansible_facts.services['postfix.service']['status'] == 'enabled'
              - ansible_facts.services['postfix@-.service']['state'] == 'running'
        - name: Assert vnstat service
          ansible.builtin.assert:
            that:
              - ansible_facts.services['vnstat.service']
              - ansible_facts.services['vnstat.service']['state'] == 'running'
              - ansible_facts.services['vnstat.service']['status'] == 'enabled'
        - name: Test security
          block:
            - name: Assert packages
              ansible.builtin.assert:
                that:
                  - ansible_facts.packages['ufw']
                  - ansible_facts.packages['fail2ban']
            - name: Test SSH geoip filter
              block:
                - name: Assert geoip filter dependency packages
                  ansible.builtin.assert:
                    that:
                      - ansible_facts.packages['geoip-bin']
                      - ansible_facts.packages['geoip-database']
                - name: Check geoip database update script
                  ansible.builtin.stat:
                    path: /etc/cron.weekly/geoip_update
                  register: geoip_update_script_result
                - name: Assert geoip database update script
                  ansible.builtin.assert:
                    that:
                      - geoip_update_script_result.stat.exists
                      - geoip_update_script_result.stat.mode == '0755'
                - name: Check geoip ssh filter script
                  ansible.builtin.stat:
                    path: /usr/local/bin/sshfilter
                  register: sshfilter_script_result
                - name: Assert geoip ssh filter script
                  ansible.builtin.assert:
                    that:
                      - sshfilter_script_result.stat.exists
                      - sshfilter_script_result.stat.mode == '0755'
                - name: Check ssh geoip filter setting
                  ansible.builtin.command:
                    cmd: 'grep "sshd: ALL: spawn /usr/local/bin/sshfilter %a" /etc/hosts.allow'
                  failed_when: ssh_geoip_filter_result.rc > 1
                  changed_when: false
                  register: ssh_geoip_filter_result
                - name: Assert ssh geoip filter setting
                  ansible.builtin.assert:
                    that:
                      - ssh_geoip_filter_result.rc == 0
            - name: Test fail2ban
              block:
                - name: Check fail2ban sshd enable
                  ansible.builtin.command:
                    cmd: fail2ban-client status sshd
                  changed_when: false
                  register: fail2ban_ssh_enable_result
                - name: Assert cfail2ban sshd enable
                  ansible.builtin.assert:
                    that:
                      - fail2ban_ssh_enable_result.rc == 0
                - name: Assert fail2ban service
                  ansible.builtin.assert:
                    that:
                      - ansible_facts.services['fail2ban.service']
                      - ansible_facts.services['fail2ban.service']['state'] == 'running'
                      - ansible_facts.services['fail2ban.service']['status'] == 'enabled'
            - name: Test ufw
              block:
                - name: Check ufw status
                  ansible.builtin.shell:
                    cmd: |
                      set -o pipefail
                      ufw status | grep "Status: active"
                    executable: /usr/bin/bash
                  failed_when: ufw_status_result.rc > 1
                  changed_when: false
                  register: ufw_status_result
                - name: Assert ufw status
                  ansible.builtin.assert:
                    that:
                      - ufw_status_result.rc == 0
        - name: Test package auto upgrade
          block:
            - name: Assert cron-apt package
              ansible.builtin.assert:
                that:
                  - ansible_facts.packages['cron-apt']
            - name: Assert apt-daily service
              ansible.builtin.assert:
                that:
                  - ansible_facts.services['apt-daily.service']
                  - ansible_facts.services['apt-daily-upgrade.service']
            - name: Check cron-apt auto upgrade
              ansible.builtin.command:
                cmd: grep "dist-upgrade -y -o APT::Get::Show-Upgraded=true" /etc/cron-apt/action.d/3-download
              failed_when: auto_upgrade_result.rc > 1
              changed_when: false
              register: auto_upgrade_result
            - name: Assert cron-apt auto upgrade
              ansible.builtin.assert:
                that:
                  - auto_upgrade_result.rc == 0
    - name: Test DKIM server
      block:
        - name: Assert OpenDKIM packages
          ansible.builtin.assert:
            that:
              - ansible_facts.packages['opendkim']
        ## 要追記
        # - name: Check
        #   when: opendkim_domains | default([]) | length > 0
        #   block:
        #     - name:
        - name: Assert OpenDKIM service
          ansible.builtin.assert:
            that:
              - ansible_facts.services['opendkim.service']
              - ansible_facts.services['opendkim.service']['state'] == 'running'
              - ansible_facts.services['opendkim.service']['status'] == 'enabled'
        - name: Assert DKIM server port
          ansible.builtin.assert:
            that:
              - 8891 in listen_tcp_posts
        - name: Test Postfix <-> OpenDKIM setting
          block:
            - name: Gather Postfix milter_protocol setting
              ansible.builtin.shell:
                cmd: |
                  set -o pipefail
                  postconf | grep "^milter_protocol ="
              failed_when: milter_protocol_result.rc > 1
              changed_when: false
              register: milter_protocol_result
            - name: Assert Postfix milter_protocol setting
              ansible.builtin.assert:
                that:
                  - "'6' == (milter_protocol_result.stdout | split(' = '))[1]"
            - name: Gather Postfix milter_default_action setting
              ansible.builtin.shell:
                cmd: |
                  set -o pipefail
                  postconf | grep "^milter_default_action ="
              failed_when: milter_default_action_result.rc > 1
              changed_when: false
              register: milter_default_action_result
            - name: Assert Postfix milter_default_action setting
              ansible.builtin.assert:
                that:
                  - "'accept' == (milter_default_action_result.stdout | split(' = '))[1]"
            - name: Gather Postfix smtpd_milters setting
              ansible.builtin.shell:
                cmd: |
                  set -o pipefail
                  postconf | grep "^smtpd_milters ="
              failed_when: smtpd_milters_result.rc > 1
              changed_when: false
              register: smtpd_milters_result
            - name: Assert Postfix smtpd_milters setting
              ansible.builtin.assert:
                that:
                  - "'inet:localhost:8891' == (smtpd_milters_result.stdout | split(' = '))[1]"
            - name: Gather Postfix non_smtpd_milters setting
              ansible.builtin.shell:
                cmd: |
                  set -o pipefail
                  postconf | grep "^non_smtpd_milters ="
              failed_when: non_smtpd_milters_result.rc > 1
              changed_when: false
              register: non_smtpd_milters_result
            - name: Assert Postfix non_smtpd_milters setting
              ansible.builtin.assert:
                that:
                  - "'inet:localhost:8891' == (non_smtpd_milters_result.stdout | split(' = '))[1]"
    - name: Test logrotate
      block:
        - name: Check Redmine log logrotate setting
          ansible.builtin.stat:
            path: /etc/logrotate.d/redmine
          register: setting_file_result
        - name: Assert Redmine log logrotate setting
          ansible.builtin.assert:
            that:
              - setting_file_result.stat.exists
        - name: Check Redmine logrotate setting detail
          block:
            - name: Check rotate file setting
              ansible.builtin.command:
                cmd: grep "/opt/redmine/log/\*.log" /etc/logrotate.d/redmine
              failed_when: rotate_file_setting_result.rc > 1
              changed_when: false
              register: rotate_file_setting_result
            - name: Assert rotate file setting
              ansible.builtin.assert:
                that:
                  - rotate_file_setting_result.rc == 0
            - name: Check copytruncate setting
              ansible.builtin.command:
                cmd: grep copytruncate /etc/logrotate.d/redmine
              failed_when: rotate_copytruncate_setting_result.rc > 1
              changed_when: false
              register: rotate_copytruncate_setting_result
            - name: Assert copytruncate setting
              ansible.builtin.assert:
                that:
                  - rotate_copytruncate_setting_result.rc == 0
    - name: Test Databse server
      block:
        - name: Assert packages
          ansible.builtin.assert:
            that:
              - ansible_facts.packages['mariadb-server']
        - name: Assert service
          ansible.builtin.assert:
            that:
              - ansible_facts.services['mariadb.service']
              - ansible_facts.services['mariadb.service']['state'] == 'running'
              - ansible_facts.services['mariadb.service']['status'] == 'enabled'
        - name: Assert port
          ansible.builtin.assert:
            that:
              - 3306 in listen_tcp_posts
    - name: Test Redmine
      block:
        - name: Check user
          ansible.builtin.user:
            name: redmine
            system: true
          check_mode: true
          register: check_user_result
        - name: Assert user
          ansible.builtin.assert:
            that:
              - check_user_result is not changed
        - name: Check group
          ansible.builtin.group:
            name: redmine
            system: true
          register: check_group_result
          check_mode: true
        - name: Assert group
          ansible.builtin.assert:
            that:
              - check_group_result is not changed
        - name: Assert Redmine service
          ansible.builtin.assert:
            that:
              - ansible_facts.services['redmine.service']
              - ansible_facts.services['redmine.service']['state'] == 'running'
              - ansible_facts.services['redmine.service']['status'] == 'enabled'
        - name: Test puma state
          block:
            - name: Check puma pid file
              ansible.builtin.stat:
                path: /opt/redmine/tmp/puma.pid
              register: puma_pid_result
            - name: Assert puma pid file
              ansible.builtin.assert:
                that:
                  - puma_pid_result.stat.exists
    - name: Test dehydrated
      block:
        - name: Assert dehydrated package
          ansible.builtin.assert:
            that:
              - ansible_facts.packages['dehydrated']
        - name: Check additional settig file
          ansible.builtin.stat:
            path: /etc/dehydrated/conf.d/local.sh
          register: additional_setting_file_result
        - name: Assert additional settig file
          ansible.builtin.assert:
            that:
              - additional_setting_file_result.stat.exists
        - name: Check hook settig file
          ansible.builtin.stat:
            path: /etc/dehydrated/hook.sh
          register: hook_setting_file_result
        - name: Assert domain settig file
          ansible.builtin.assert:
            that:
              - hook_setting_file_result.stat.exists
              - hook_setting_file_result.stat.mode == '0750'
        - name: Check domain settig file
          ansible.builtin.stat:
            path: /etc/dehydrated/domains.txt
          register: domain_setting_file_result
        - name: Assert domain settig file
          ansible.builtin.assert:
            that:
              - domain_setting_file_result.stat.exists
    - name: Test Web server
      block:
        - name: Assert Nginx package
          ansible.builtin.assert:
            that:
              - ansible_facts.packages['nginx']
        - name: Assert Nginx service
          ansible.builtin.assert:
            that:
              - ansible_facts.services['nginx.service']
              - ansible_facts.services['nginx.service']['state'] == 'running'
              - ansible_facts.services['nginx.service']['status'] == 'enabled'
        - name: Assert Web server port(HTTP)
          ansible.builtin.assert:
            that:
              - 80 in listen_tcp_posts
        - name: Assert Web server port(HTTPS)
          ansible.builtin.assert:
            that:
              - 443 in listen_tcp_posts
          when: dehydrated_domains | default({}) | dict2items | length > 0
    - name: Test backup
      block:
        - name: Assert packages
          ansible.builtin.assert:
            that:
              - ansible_facts.packages['rclone']
              - ansible_facts.packages['restic']
        - name: Test cron job
          become: true
          become_user: redmine
          block:
            - name: Check Redmine data backup cron job
              ansible.builtin.shell:
                cmd: |
                  set -o pipefail
                  crontab -l | grep "Ansible: role:backup/setting:"
                executable: /usr/bin/bash
              failed_when: crontab_result.rc > 1
              changed_when: false
              register: crontab_result
            - name: Assert Redmine data backup cron job
              ansible.builtin.assert:
                that:
                  - crontab_result.rc == 0
        - name: Test mackerel-agent
          block:
            - name: Assert mackerel-agent package
              ansible.builtin.assert:
                that:
                  - ansible_facts.packages['mackerel-agent']
                  - ansible_facts.packages['mackerel-agent-plugins']
                  - ansible_facts.packages['mackerel-check-plugins']
            - name: Check environment variable
              ansible.builtin.command:
                cmd: grep MYSQL_PASSWORD= /etc/default/mackerel-agent
              failed_when: env_var_result.rc > 1
              changed_when: false
              register: env_var_result
            - name: Assert environment variable
              ansible.builtin.assert:
                that:
                  - env_var_result.rc == 0
            - name: Assert mackerel-agent service
              ansible.builtin.assert:
                that:
                  - ansible_facts.services['mackerel-agent.service']
            - name: Assert running mackerel-agent service
              ansible.builtin.assert:
                that:
                  - ansible_facts.services['mackerel-agent.service']['status'] == 'enabled'
                  - ansible_facts.services['mackerel-agent.service']['state'] == 'running'
              when: mackerel_agent_api_key | default('') | length > 0
        # - name: Test DNS
        #   block:
        #     - name: Assert A recode
        #       ansible.builtin.assert:
        #         that:
        #           - ansible_facts.default_ipv4.address in {{ query('community.dns.lookup', redminehostname + '.') }}
        #       when: ansible_facts.default_ipv4.address is defined
        #     - name: Assert AAAA recode
        #       ansible.builtin.assert:
        #         that:
        #           - ansible_facts.default_ipv6.address in {{ query('community.dns.lookup', redminehostname + '.', type='AAAA') }}
        #       when: ansible_facts.default_ipv6.address is defined
