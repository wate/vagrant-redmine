---
document_dir: /vagrant/docs
document_schema_doc_dir: "{{ document_dir }}/schema"
document_api_doc_dir: "{{ document_dir }}/api"
document_rest_api_doc_dir: "{{ document_dir }}/rest_api"

document_domain_model_conf:
  ## Specifies which attributes to include in the diagram output.
  ## To hide attributes altogether, set this option to false.
  ## Default value: content
  attributes:
    ## This can be any combination of the following attribute types:
    ### any foreign key column in use for associations
    - foreign_keys
    ### the primary key column (typically id)
    # - primary_keys
    ### any of the 'magic' timestamp columns (created_at/on, updated_at/on)
    # - timestamps
    ### the single table inheritance column (typically type)
    # - inheritance
    ### all other columns
    - content
  ## Specifies whether or not to display disconnected entities. An entity is disconnected if it has no relationships with any other entity.
  ## Default value: true
  # disconnected: true
  ## The file basename of the generated diagram.
  ## Together with the file type, this will determine the file name of the output.
  ## Default value: ERD
  # filename: erd
  ## The file type of the generated diagram.
  ## PDF output is strongly recommended, other formats may render significantly worse.
  ## The available formats depend on your installation of Graphviz.
  ## If you set the file type to dot, raw Graphviz instructions are saved in dot format. This does not require Graphviz to be installed.
  ## Default value: pdf
  filetype: svg
  ## Specifies whether or not to display relationships that are indirect.
  ## Indirect relationships are defined in Active Record by `has_many :through` associations.
  ## Older versions of Graphviz may have trouble drawing diagrams with indirect relationships.
  ## Default value: false
  # indirect: false
  ## Specifies whether or not to display inheritance hierarchies.
  ## Single table inheritance in Rails is usually transparent and uninteresting in an entity-relationship diagram.
  ## In some cases inheritance is central to the domain model, however.
  ## For example, subtypes may have their own relationships, which would be hidden otherwise.
  ## In those cases it makes a lot of sense to display all subtypes.
  ## Default value: false
  inheritance: true
  ## The ideal diagram notation may not be the same for everyone.
  ## Rails ERD defaults to simple arrows to indicate cardinalities.
  ## No difference is made for optional and mandatory relationships (sometimes referred to as participation).
  ## This a classic way to draw data structures. It is easy to understand, and provides enough information in most cases.
  ## Default value: simple
  notation: bachman
  ## Diagrams display entities in a hierarchical way.
  ## The hierarchy is defined by the associations on your models.
  ## A model that has_one or has_many other models will be higher in the hierarchy.
  ## This option causes the hierarchy to run either horizontally or vertically.
  ## Which of the two is most appropriate depends on your models, be sure to try both.
  ## Default value: horizontal
  # orientation: horizontal
  ## Specifies whether or not to display polymorphic hierarchies.
  ## Polymorphic associations are normally displayed as direct relationships.
  ## In some cases this may be confusing, because it masks their true nature.
  ## Enable this option if polymorphic associations play a crucial role in your domain model.
  ## Enabling this option will also display abstract classes.
  ## Default value: false
  polymorphism: true
  ## By default, a title is displayed at the top of the diagram: `<application> domain model`.
  ## You can change the title by setting this option.
  ## If set to false, no title will be displayed at all.
  ## Default value: true
  title: Redmine domain model
  ## When set to false, no warnings are printed to the command line while processing models and drawing the diagram.
  ## Default value: true
  # warn: true
  ## Only include specified models. Together with exclude, this will allow to filter out models on your diagram.
  ## Default value: nil
  ## Example: only="Order,Customer,Product"
  # only: null
  ## Exclude specified models.
  ## Together with only, this will allow to filter out models on your diagram.
  ## Default value: nil
  ## Example: exclude="User,Role"
  # exclude: null


# force_update_api_doc: false
# force_update_domain_model_doc: false
